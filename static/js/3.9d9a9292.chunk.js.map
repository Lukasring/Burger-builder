{"version":3,"sources":["containers/Chekout/ContactData/ContactData.module.css","components/Order/ChekoutSummary/ChekoutSummary.module.css","containers/Chekout/ContactData/ContactData.js","components/Order/ChekoutSummary/ChekoutSummary.js","containers/Chekout/Chekout.js"],"names":["module","exports","connect","state","ingredients","burgerBuilder","totalPrice","loading","order","token","auth","userId","dispatch","onPurchase","purchaseBurger","withErrorHandler","props","useState","name","label","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","options","displayValue","orderForm","setOrderForm","formIsValid","setFormIsValid","formElementsArray","key","push","id","config","Spinner","className","classes","ContactData","onSubmit","event","preventDefault","formData","formElementIdentifier","price","orderData","map","element","Input","inputType","invalid","shouldValidate","changed","inputIdentifier","updatedOrderFormElement","updateObject","target","checkValidity","updatedOrderForm","inputChangedHandler","Button","btnType","disabled","axios","checkoutSummary","CheckoutSummary","style","width","margin","Burger","clicked","checkoutCancelled","checkoutContinued","purchased","summary","to","purchasedRedirect","history","goBack","replace","path","match","component"],"mappings":"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","file":"static/js/3.9d9a9292.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3PldL\",\"Input\":\"ContactData_Input__1IWG4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"ChekoutSummary_CheckoutSummary__2XIcB\"};","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport classes from \"./ContactData.module.css\";\r\nimport axios from \"../../../axios-orders\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\r\nimport { purchaseBurger } from \"../../../store/actions/order\";\r\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\r\n\r\nconst ContactData = (props) => {\r\n  const [orderForm, setOrderForm] = useState({\r\n    name: {\r\n      label: \"Name\",\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"Your Name\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    street: {\r\n      label: \"Street\",\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"Your Street\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    zipCode: {\r\n      label: \"ZIP code\",\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"ZIP code\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 5,\r\n        maxLength: 5,\r\n        isNumeric: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    country: {\r\n      label: \"Country\",\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"Your Country\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    email: {\r\n      label: \"E-mail\",\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"email\",\r\n        placeholder: \"Your E-mail\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        isEmail: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    deliveryMethod: {\r\n      label: \"Delivery method\",\r\n      elementType: \"select\",\r\n      elementConfig: {\r\n        options: [\r\n          { value: \"fastest\", displayValue: \"Fastest\" },\r\n          { value: \"cheapest\", displayValue: \"Cheapest\" },\r\n        ],\r\n      },\r\n      value: \"fastest\",\r\n      validation: {},\r\n      valid: true,\r\n    },\r\n  });\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n  const orderHandlder = (event) => {\r\n    event.preventDefault();\r\n    const formData = {};\r\n    for (let formElementIdentifier in orderForm) {\r\n      formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\r\n    }\r\n    //production, geriau kaina butu skaiciuot back end\r\n    const order = {\r\n      ingredients: props.ingredients,\r\n      price: props.totalPrice,\r\n      orderData: formData,\r\n      userId: props.userId,\r\n    };\r\n    props.onPurchase(order, props.token);\r\n  };\r\n\r\n  const inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedOrderFormElement = updateObject(orderForm[inputIdentifier], {\r\n      value: event.target.value,\r\n      valid: checkValidity(\r\n        event.target.value,\r\n        orderForm[inputIdentifier].validation\r\n      ),\r\n      touched: true,\r\n    });\r\n    const updatedOrderForm = updateObject(orderForm, {\r\n      [inputIdentifier]: updatedOrderFormElement,\r\n    });\r\n\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n    setOrderForm(updatedOrderForm);\r\n    setFormIsValid(formIsValid);\r\n  };\r\n\r\n  const formElementsArray = [];\r\n  for (let key in orderForm) {\r\n    formElementsArray.push({\r\n      id: key,\r\n      config: orderForm[key],\r\n    });\r\n  }\r\n\r\n  return props.loading ? (\r\n    <Spinner />\r\n  ) : (\r\n    <div className={classes.ContactData}>\r\n      <h4>Enter your contact data</h4>\r\n      <form onSubmit={orderHandlder}>\r\n        {formElementsArray.map((element) => (\r\n          <Input\r\n            key={element.id}\r\n            label={element.config.label}\r\n            inputType={element.config.elementType}\r\n            elementConfig={element.config.elementConfig}\r\n            value={element.config.value}\r\n            invalid={!element.config.valid}\r\n            shouldValidate={element.config.validation}\r\n            touched={element.config.touched}\r\n            changed={(event) => inputChangedHandler(event, element.id)}\r\n          />\r\n        ))}\r\n        <Button btnType=\"Success\" disabled={!formIsValid}>\r\n          Order\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ingredients: state.burgerBuilder.ingredients,\r\n    totalPrice: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onPurchase: (order, token) => dispatch(purchaseBurger(order, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n","import React from \"react\";\r\nimport Burger from \"../../Burger/Burger\";\r\nimport Button from \"../../UI/Button/Button\";\r\nimport classes from \"./ChekoutSummary.module.css\";\r\n\r\nconst checkoutSummary = (props) => {\r\n  return (\r\n    <div className={classes.CheckoutSummary}>\r\n      <h1>Enjoy it!</h1>\r\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\r\n        <Burger ingredients={props.ingredients} />\r\n      </div>\r\n      <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>\r\n        Cancel\r\n      </Button>\r\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\r\n        Continue\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default checkoutSummary;\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport ContactData from \"./ContactData/ContactData\";\r\nimport CheckoutSummary from \"../../components/Order/ChekoutSummary/ChekoutSummary\";\r\n\r\nconst Checkout = (props) => {\r\n  const checkoutCancelledHandler = () => {\r\n    props.history.goBack();\r\n  };\r\n\r\n  const checkoutContinuedHandler = () => {\r\n    props.history.replace(\"/checkout/contact-data\");\r\n  };\r\n\r\n  let summary = <Redirect to=\"/\" />;\r\n  if (props.ingredients) {\r\n    const purchasedRedirect = props.purchased ? <Redirect to=\"/\" /> : null;\r\n    summary = (\r\n      <div>\r\n        {purchasedRedirect}\r\n        <CheckoutSummary\r\n          ingredients={props.ingredients}\r\n          checkoutCancelled={checkoutCancelledHandler}\r\n          checkoutContinued={checkoutContinuedHandler}\r\n        />\r\n        <Route\r\n          path={`${props.match.path}/contact-data`}\r\n          component={ContactData}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return summary;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ingredients: state.burgerBuilder.ingredients,\r\n    purchased: state.order.purchased,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n"],"sourceRoot":""}